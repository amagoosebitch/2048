class Field {
	field int startX, startY, score;
	field boolean failed, win;
	field Array поле, tempCol, tempRow;

	constructor Field new() {
		var int i, j;
		let startX = 224;
		let startY = 96;
		let score = 0;
		let failed = false;
        let win = false;
		let i = 0;
        let поле = Array.new(16);
        let tempCol = Array.new(4);
        let tempRow = Array.new(4);

		while (i < 4) {
            while (j < 4) {
                let поле[i*4+j] = 0;
                let j = j + 1;
            }
            let j = 0;
			let i = i + 1;
		}
        
		return this;
	}

	method void dispose() {
        do tempCol.dispose();
        do tempRow.dispose();
        do поле.dispose();
		do Memory.deAlloc(this);

		return;
	}

    method void slideRowLeft(Array row) {
        var int temp, i, j;
        var boolean exit;
		let i = 1;

		while (i < 4) {
			let exit = false;
			if (~(row[i] = 0)) {
				let j = i;
				while (~exit) {
					let j = j - 1;
                    // другая цифра
					if (~(row[j] = 0)) {
						let exit = true;
						let j = j + 1;
						let temp = row[i];
						let row[i] = 0;
						let row[j] = temp;
					}

					// стенка
					if ((j = 0) & ~exit) {
						let exit = true;
						let temp = row[i];
						let row[i] = 0;
						let row[j] = temp;
					}
				}
			}
			let i = i + 1;
		}

        return;
    }

	method void slideLeft() {
        var int i, j, temp;
		let i = 0;

        while (i < 4) {
            let j = 0;
            while (j < 4) {
                let tempRow[j] = поле[4*i + j];
                let j = j + 1;
            }

            let j = 0;
            do slideRowLeft(tempRow);
            while (j < 4) {
                let поле[4*i + j] = tempRow[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
        }

		return;
	}

	method void slideRight() {
		var int i, j;
		let i = 0;
        let j = 0;

        while (i < 4) {
            while (j < 4) {
                let tempRow[j] = поле[i*4+3-j];
                let j = j + 1;
            }

            let j = 0;
            do slideRowLeft(tempRow);
            while (j < 4) {
                let поле[i*4+3-j] = tempRow[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
        }

        return;
	}

    method void mergeRowLeft(Array row) {
        var int i;
        let i = 0;

        while (i < 3) {
			if (row[i] = row[i+1]) {
				let row[i] = row[i]*2;
                if (row[i] = 2048) {
                    do setWin();
                }

				let score = score + row[i];
				let row[i + 1] = 0;
			}
            let i = i + 1;
        }

        return;
    }

	method void mergeLeft() {
        var int i, j;
		let i = 0;
        let j = 0;

		while (i < 4) { 
            while (j < 4) {
                let tempRow[j] = поле[4*i + j];
                let j = j + 1;
            }

            let j = 0;
            do mergeRowLeft(tempRow);
            while (j < 4) {
                let поле[4*i + j] = tempRow[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
		}

		return; 
	}

	method void mergeRight() {
		var int i, j;
		let i = 0;
        let j = 0;

		while (i < 4) { 
            while (j < 4) {
                let tempRow[j] = поле[4*i+3-j];
                let j = j + 1;
            }

            let j = 0;
            do mergeRowLeft(tempRow);
            while (j < 4) {
                let поле[4*i+3-j] = tempRow[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
		}

		return; 
	}

	method void moveLeft(boolean test) {
		var Field original;
		let original = copy();

		do slideLeft();
		do mergeLeft();
		do slideLeft();
		if (~(compareState(original))) {
			do spawnRandomNum();
		}

		do original.dispose(); 
        if (~test) {
            do checkFailed();
        }

		return; 
	}

	method void moveRight(boolean test) {
		var Field original;
		let original = copy();

		do slideRight();
		do mergeRight();
		do slideRight();
		if (~(compareState(original))) {
			do spawnRandomNum();
		}

		do original.dispose();
        if (~test) {
            do checkFailed();
        }

		return;
	}

	method void slideDown() {
		var int i, j;
        let i = 0;
        let j = 0;
        
        while (i < 4) {
            while (j < 4) {
                let tempCol[j] = поле[12 - (4*j) + i];
                let j = j + 1;
            }

            let j = 0;
            do slideRowLeft(tempCol);
            while (j < 4) {
                let поле[12 - (4*j) + i] = tempCol[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
        }

        return;
	}

	method void mergeDown() {
		var int i, j;
        let i = 0;
        let j = 0;
        
        while (i < 4) {
            while (j < 4) {
                let tempCol[j] = поле[12 - (4*j) + i];  
                let j = j + 1;
            }

            let j = 0;
            do mergeRowLeft(tempCol);
            while (j < 4) {
                let поле[12 - (4*j) + i] = tempCol[j];
                let j = j + 1;
            }
            let j = 0;
            let i = i + 1;
        }

		return;
	}

	method void moveDown(boolean test) {
		var Field original;
		let original = copy();

		do slideDown();
		do mergeDown();
		do slideDown();
		if (~(compareState(original))) {
			do spawnRandomNum();
		}

		do original.dispose();
        if (~test) {
            do checkFailed();
        }

		return;
	}

    method void slideUp() {
		var int i, j;
        let i = 0;
        let j = 0;

        while (i < 4) {
            while (j < 4) {
                let tempCol[j] = поле[4*j+3-i];
                let j = j + 1;
            }

            let j = 0;
            do slideRowLeft(tempCol);
            while (j < 4) {
                let поле[4*j+3-i] = tempCol[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
        }

        return;
	}

	method void mergeUp() {
        var int i, j;
        let i = 0;
        let j = 0;

        while (i < 4) {
            while (j < 4) {
                let tempCol[j] = поле[4*j+3-i];
                let j = j + 1;
            }

            let j = 0;
            do mergeRowLeft(tempCol);
            while (j < 4) {
                let поле[4*j+3-i] = tempCol[j];
                let j = j + 1;
            }

            let j = 0;
            let i = i + 1;
        }

		return; 
	}

	method void moveUp(boolean test) {
		var Field original;
		let original = copy();

		do slideUp();
		do mergeUp();
		do slideUp();
		if (~(compareState(original))) {
			do spawnRandomNum();
		}

		do original.dispose();
        if (~test) {
            do checkFailed();
        }

		return;
	}

	method Array getState() {
		var Array result;
        var int i;
        let i = 0;
		let result = Array.new(16);

        while (i < 16) {
            let result[i] = поле[i];
            let i = i + 1;
        }

		return result;
	}

	method void setFailed() {
		let failed = true;
		return;
	}

	method boolean getFail() {
		return failed;
	}

    method void setWin() {
		let win = true;
		return;
	}

	method boolean getWin() {
		return win;
	}

    method int getX() {
        return startX;
    }

    method int getY() {
        return startY;
    }

	method boolean compareState(Field other) {
		var Array полеOther;
        var int i, j;
        var boolean result;
        let i = 0;
        let j = 0;
        let result = true;
        let полеOther = other.getState();

        while (result & (i < 4)) {
            while (result & (j < 4)) {
                let result = result & (поле[4*i+j] = полеOther[4*i+j]);
                let j = j + 1;
            }
            let j = 0;
            let i = i+1;
        }

        do полеOther.dispose();

		return result;
	}

	method void spawnRandomNum() {
		var int location, rowNum, colNum, iterations, num;
		let iterations = 0;
		let num = 2;

		if (Random.random() > 143) {
			let num = 4;
		}
		while (iterations < 160) {
			let iterations = iterations + 1;
			let location = Random.random() / 10;

            if (поле[location] = 0) {
                let поле[location] = num;

                return;
            } 
		}

		return;
	}

	method void configureState(Array prevField) {
        var int i;
        let i = 0;

        while (i < 16) {
            let поле[i] = prevField[i];
            let i = i +1;
        }

		return;
	}

	method void setScore(int scoreArg) {
		let score = scoreArg;
		return;
	}

	method Field copy() {
		var Field copy;
        var Array newПоле;
        var int i;
        let i = 0;
        let newПоле = Array.new(16);

        while (i < 16) {
            let newПоле[i] = поле[i];
            let i = i + 1;
        }

		let copy = Field.new();
		do copy.configureState(newПоле);
        do newПоле.dispose();
		do copy.setScore(score);

		return copy;
	}

	method void checkFailed() {
		var Field failTest;
		let failTest = copy();

		do failTest.moveLeft(true);
		if (~(compareState(failTest))) {
			do failTest.dispose();
			return;
		}

		do failTest.moveUp(true);
		if (~(compareState(failTest))) {
			do failTest.dispose();
			return;
		}

		do failTest.moveRight(true);
		if (~(compareState(failTest))) {
			do failTest.dispose();
			return;
		}

		do failTest.moveDown(true);
		if (~(compareState(failTest))) {
			do failTest.dispose();
			return;
		}

		do failTest.dispose();
		do setFailed();

		return;
	}

	method void display() {
		var int x, y, memAddress;
		var String string;
        let string = "SCORE: ";

        do Output.moveCursor(7, 27);        
        do Output.printString(string);
        do string.dispose();
        do Output.printInt(score);

		let x = 0;
		let y = 0;
		while (y < 4) {
            do Screen.setColor(false);
            do Screen.drawRectangle(startX + (16*x) + 1, startY + (16*y) + 1, 
            	startX + (16*x) + 15, startY + (16*y) + 15);
            

			let memAddress = 16384 + 32 + (startX/16) + (startY*32) + (y*512) + x;
            
            do Drawer.draw(memAddress, поле[4*y+x]);
			let x = x + 1;
			if (x > 3) {
				let y = y + 1;
				let x = 0;
			}
		}
		return;
	}
}